<!-- Core Firebase JS SDK -->
<script src="https://www.gstatic.com/firebasejs/7.14.4/firebase-app.js"></script>

<!-- SDKs for Firebase products -->
<script src="https://www.gstatic.com/firebasejs/7.14.4/firebase-messaging.js"></script>

<!-- Init Firebase Config -->
<script src="<?php echo $this->_baseUrl ?>js/mitienda/firebase/init.js"></script>

<script>
  var isCustomerLoggedIn = <?php echo json_encode($this->_helper->isCustomerLoggedIn()); ?>;
  var doCustomerHasToken = <?php echo json_encode($this->_doCustomerHasToken); ?>;

  // [START get_messaging_object]
  // Retrieve Firebase Messaging object.
  const messaging = firebase.messaging();
  // [END get_messaging_object]

  // [START set_public_vapid_key]
  // Add the public key generated from the console here.
  messaging.usePublicVapidKey("BELsJ7nzQUMGuwC8NVXKEzGUi3OtAZSqenzN_qD3VzTBLrNasPgBkH3p8ZqbacNnoG93236e6Ks78rbHOTuRK9w");
  // [END set_public_vapid_key]

  // [START refresh_token]
  // Callback fired if Instance ID token is updated.
  messaging.onTokenRefresh(() => {
    messaging.getToken().then((refreshedToken) => {
      console.log('Token refreshed.');
      // Indicate that the new Instance ID token has not yet been sent to the
      // app server.
      setTokenSentToServer(false);
      // Send Instance ID token to app server.
      sendTokenToServer(refreshedToken);
    }).catch((err) => {
      console.log('Unable to retrieve refreshed token ', err);
    });
  });
  // [END refresh_token]

  // [START receive_message]
  // Handle incoming messages. Called when:
  // - a message is received while the app has focus
  // - the user clicks on an app notification created by a service worker
  //   `messaging.setBackgroundMessageHandler` handler.
  messaging.onMessage((payload) => {
    console.log('Message received.', payload);
    alert(payload.notification.body);
    // TODO -- Customize notification here
  });
  // [END receive_message]

  function getToken() {
    // [START get_token]
    // Get Instance ID token. Initially this makes a network call, once retrieved
    // subsequent calls to getToken will return from cache.
    messaging.getToken().then((currentToken) => {
      if (currentToken) {
        sendTokenToServer(currentToken);
      } else {
        // Show permission request.
        console.log('No Instance ID token available. Request permission to generate one.');
        setTokenSentToServer(false);
        requestPermission();
      }
    }).catch((err) => {
      console.log('An error occurred while retrieving token. ', err);
      setTokenSentToServer(false);
    });
    // [END get_token]
  }

  function requestPermission() {
    console.log('Requesting permission...');
    // [START request_permission]
    Notification.requestPermission().then((permission) => {
      if (permission === 'granted') {
        console.log('Notification permission granted.');
        // TODO(developer): Retrieve an Instance ID token for use with FCM.
        // [START_EXCLUDE]
        // In many cases once an app has been granted notification permission,
        // it should update its UI reflecting this.
        getToken();
        // [END_EXCLUDE]
      } else {
        console.log('Unable to get permission to notify.');
      }
    });
    // [END request_permission]
  }

  function deleteToken() {
    // Delete Instance ID token.
    // [START delete_token]
    messaging.getToken().then((currentToken) => {
      messaging.deleteToken(currentToken).then(() => {
        console.log('Token deleted.');
        setTokenSentToServer(false);
        // [START_EXCLUDE]
        // Once token is deleted update UI.
        getToken();
        // [END_EXCLUDE]
      }).catch((err) => {
        console.log('Unable to delete token. ', err);
      });
      // [END delete_token]
    }).catch((err) => {
      console.log('Error retrieving Instance ID token. ', err);
    });

  }

  // Send the Instance ID token to the application server, so that it can:
  // - send messages back to this app
  // - subscribe/unsubscribe the token from topics
  function sendTokenToServer(currentToken) {
    if (!isTokenSentToServer()) {
      console.log('Sending token to server...');
      new Ajax.Request(`/pushnotifier/firebasetoken/create`, {
        parameters: {
          tokenId: currentToken
        },
        onSuccess: function(response) {
          var _response = JSON.parse(response.responseText);
          if (_response.status) {
            console.log('Subscription ID imported successfully.');
            console.log(_response.data);
          } else {
            console.log('Error while subscribing.');
          }
        },
        onFailure: function(response) {
          console.log('Error while subscribing.');
        }
      });
      console.log(currentToken);
      setTokenSentToServer(true);
    } else {
      console.log('Token already sent to server so won\'t send it again ' +
        'unless it changes');
    }
  }

  function isTokenSentToServer() {
    return window.localStorage.getItem('mt_pn_ft_ss') === '1';
  }

  function setTokenSentToServer(sent) {
    window.localStorage.setItem('mt_pn_ft_ss', sent ? '1' : '0');
  }

  if (isCustomerLoggedIn) {
    getToken();
    // deleteToken();
  }
</script>
